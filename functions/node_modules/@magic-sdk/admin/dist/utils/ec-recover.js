"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var eth_sig_util_1 = __importDefault(require("eth-sig-util"));
var ethUtil = __importStar(require("ethereumjs-util"));
/**
 * Recover the signer from an Elliptic Curve signature.
 */
function ecRecover(data, signature) {
    // Use ecRecover on the Proof, to validate if it recovers to the expected
    // Claim, and expected Signer Address.
    var ecRecoverMsgParams = {
        data: ethUtil.bufferToHex(Buffer.from(data, 'utf8')),
        sig: signature,
    };
    return eth_sig_util_1.default.recoverPersonalSignature(ecRecoverMsgParams);
}
exports.ecRecover = ecRecover;
//# sourceMappingURL=ec-recover.js.map